#
# fzf profile
#
# - $FZF_DEFAULT_OPTS

# - $FZF_CTRL_T_OPTS
# - $FZF_CTRL_R_OPTS
# - $FZF_ALT_C_COMMAND
# - $FZF_ALT_C_OPTS
# - $FZF_CTRL_R_OPTS
# set -x
# topklean options
# source bash integration (replace with yours, zsh, fish)
[[ ! -f ~/.config/fzf/.fzfrc ]] && return 1

source ~/.config/fzf/.fzfrc

# options befavior (case, extend searhc, etc.)
# ignore case
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS" -i"
# no extend search
# export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS" +x"

# bindings / motion
# this are my personal bindings. if you prefer the default, just comment the line
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS" --bind='alt-i:up,alt-k:down,alt-j:backward-char,alt-l:forward-char,ctrl-alt-j:backward-word,ctrl-alt-l:forward-word'"
# kill
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS" --bind='ctrl-alt-k:kill-line,alt-u:backward-kill-word,alt-o:kill-word'"

# style

# colors
fzf_fg_color="#c9d0d0"
fzf_bg_color="#252525"
fzf_fg_plus_color="#cccccc"
fzf_bg_plus_color="#313939"
fzf_hl_color="#00aaa2"
fzf_hl_plus_color="#23aaa2"
fzf_border_color="#618989"
fzf_marker_color="#09c797"
fzf_label_color="#88cfcf"

export FZF_DEFAULT_OPTS+=' --color=fg:'$fzf_fg_color
export FZF_DEFAULT_OPTS+=' --color=fg+:'$fzf_fg_plus_color
export FZF_DEFAULT_OPTS+=' --color=bg:'$fzf_bg_color
export FZF_DEFAULT_OPTS+=' --color=bg+:'$fzf_bg_plus_color
export FZF_DEFAULT_OPTS+=' --color=hl:'$fzf_hl_color
export FZF_DEFAULT_OPTS+=' --color=hl+:'$fzf_hl_plus_color
export FZF_DEFAULT_OPTS+=' --color=marker:'$fzf_marker_color
export FZF_DEFAULT_OPTS+=' --color=border:'$fzf_border_color
export FZF_DEFAULT_OPTS+=' --color=label:'$fzf_label_color
export FZF_DEFAULT_OPTS+=' --color=info:#afaf87'
export FZF_DEFAULT_OPTS+=' --color=prompt:#09d7a7'
export FZF_DEFAULT_OPTS+=' --color=spinner:#af5fff'
export FZF_DEFAULT_OPTS+=' --color=pointer:#09d7a7'
export FZF_DEFAULT_OPTS+=' --color=header:#87afaf'
export FZF_DEFAULT_OPTS+=' --color=query:#d9d9d9'

#
fzf_prompt="$ "
fzf_pointer="►"
fzf_marker="+"
fzf_separator="─"
fzf_scrollbar="│"
# fzf_ghost="search..."

# default - apply globaly.
export FZF_DEFAULT_OPTS+=" --ghost=$fzf_ghost"
export FZF_DEFAULT_OPTS+=" --height=-20%"
export FZF_DEFAULT_OPTS+=" --min-height=20"
export FZF_DEFAULT_OPTS+=" --reverse"
export FZF_DEFAULT_OPTS+=" --border=rounded"
export FZF_DEFAULT_OPTS+=" --margin=1,2"
export FZF_DEFAULT_OPTS+=" --cycle"
export FZF_DEFAULT_OPTS+=' --pointer="'$fzf_pointer'"'


# File search
# themings and style
# add label
fzf_file_label="File Search"
fzf_file_prompt="$ "
fzf_file_pointer=$fzf_pointer
fzf_file_marker=' ✓'  # ✓
fzf_file_separator="─"
fzf_file_scrollbar="│"

export FZF_CTRL_T_OPTS+=' --style full'
export FZF_CTRL_T_OPTS+=' --info="right"'
export FZF_CTRL_T_OPTS+=' --border-label=" '$fzf_file_label' "'
export FZF_CTRL_T_OPTS+=' --prompt="'$fzf_file_prompt'"'
export FZF_CTRL_T_OPTS+=' --pointer="'$fzf_file_pointer'"'
export FZF_CTRL_T_OPTS+=' --marker="'$fzf_file_marker'"'
export FZF_CTRL_T_OPTS+=' --separator="'$fzf_file_separator'"'
export FZF_CTRL_T_OPTS+=' --walker="file,dir,hidden,follow"'

# export FZF_CTRL_T_OPTS=$FZF_CTRL_T_OPTS' --style full --prompt="$ " --marker="+" --pointer="►" --separator="─" -scrollbar="│" --info="right"'

# add file info
export FZF_CTRL_T_OPTS+=' --bind focus:transform-header:"file -b {}"' 

# preview window in file search
# use bat, num line, at rigth, if less then 50 cols, at bottom
export FZF_CTRL_T_OPTS+=' --ansi --preview="bat --color=always -n {}"'
export FZF_CTRL_T_OPTS+=' --preview-window="hidden,right,<50(down,40%)"'
# toggle preview
export FZF_CTRL_T_OPTS+=' --bind "ctrl-p:toggle-preview"'


# cd
fzf_cd_label="cd"
#fzf_history_ghost="search command..."
fzf_cd_marker=$fzf_marker
fzf_cd_pointer=$fzf_pointer

export FZF_ALT_C_OPTS=$FZF_DEFAULT_OPTS
export FZF_ALT_C_OPTS+=' --style minimal'
export FZF_ALT_C_OPTS+=' --border-label=" '$fzf_cd_label' "'
export FZF_ALT_C_OPTS+=' --ghost="'${fzf_cd_ghost:-$fzf_ghost}'"'
export FZF_ALT_C_OPTS+=' --prompt="$ "'
export FZF_ALT_C_OPTS+=' --marker="'$fzf_cd_marker'"'
export FZF_ALT_C_OPTS+=' --pointer="'$fzf_cd_pointer'"'
export FZF_ALT_C_OPTS+=' --separator="─"'
export FZF_ALT_C_OPTS+=' --info="inline-right"'

# preview window in file search
export FZF_ALT_C_OPTS+=' --ansi --preview="tree -aC {}"'
export FZF_ALT_C_OPTS+=' --preview-window="hidden,right,<50(down,40%)"'
# toggle
export FZF_ALT_C_OPTS+=' --bind "ctrl-p:toggle-preview,ctrl-p:+change-border-label()"'

# history
fzf_history_label="history"
#fzf_history_ghost="search command..."
fzf_history_marker=$fzf_marker
fzf_history_pointer=$fzf_pointer

export FZF_CTRL_R_OPTS=$FZF_DEFAULT_OPTS
export FZF_CTRL_R_OPTS+=' --style minimal'
export FZF_CTRL_R_OPTS+=' --border-label=" '$fzf_history_label' "'
export FZF_CTRL_R_OPTS+=' --ghost="'${fzf_history_ghost:-$fzf_ghost}'"'
export FZF_CTRL_R_OPTS+=' --prompt="$ "'
export FZF_CTRL_R_OPTS+=' --marker="'$fzf_history_marker'"'
export FZF_CTRL_R_OPTS+=' --pointer="'$fzf_history_pointer'"'
export FZF_CTRL_R_OPTS+=' --separator="─"'
export FZF_CTRL_R_OPTS+=' --info="inline-right"'


# function
#	all will be prefixed with f

__check_cmd() {
	# check for command to be used
	# ls / exa
	__cmd_ls=$(command -v exa) && {
		__cmd_ls_nth=7
		:
	}|| {
		# if fail (exa not installed)
		# switch to ls
		__cmd_ls="ls"
		__cmd_ls_nth=8
	}
	__cmd_ls_opts="-l --color=always"
}

#get list of func available
fhelp() {
	# list all fzf func
	# 3 first lines of the function must be
	# the help
	__label="fzf help functions"
	__fzf_profile="$HOME/.config/fzf/.fzf_profile"
#     set -x
	[[ $1 == list ]] && { grep -Pi -A3 '^f[^_\s]+(?= {$)' $__fzf_profile|tr -d '{'; return 0; }
#     set +x
	grep -Poi '^f[^_\s]+(?=\(\) {$)' "$__fzf_profile" | fzf --border-label=" $__label " --preview='grep -Pi -A3 {}"(?=\()" '$__fzf_profile' 2>/dev/null | grep -Pio "#.+" '
}

# man
#
fman() {
	# search all man
	# MAN_PATH : arch linux and other, not every distro has this ENV VAR
	#
	if [[ -z $MAN_PATH ]]; then MAN_PATH=/usr/share/man; fi

#     __check_cmd
	__label="all man"

	command ls -1 "${MAN_PATH}"/man* | \
		fzf  --border-label=" $__label " --delimiter \. --with-nth '{1} {2}' --accept-nth '{1}.{2}' --preview="man '{1}.{2}' 2>/dev/null"|\
		xargs man
}
fmank() {
	# search strings in all man
	# $1... strings to search 
	#
	(( $# < 1 )) && return 1
	__label="search strings in man (-k)"

	man -k "$@"|fzf --border-label="$__label" --delimiter '[()-]' --accept-nth='{1}.{2}' --preview="man '{1}.{2}' 2>/dev/null"|xargs man
}

# arch package search / Management
fyayOwner() {
	# search for parckage owner of a file(s)
	# args are prequery 
	#
	yay -Ql | fzf --query="$*" --multi --accept-nth='{2}' | xargs yay -Qo
}
fyayfilesfrompackage() {
	# search in all packages installed
	# for the selection,  search the files
	# ls the files selection
	__check_cmd
	yay -Q|fzf --preview='yay -Ql {1}' --accept-nth='{1}' --multi|xargs yay -Ql|fzf --sync --accept-nth='{2}' --multi|xargs $__cmd_ls $__cmd_ls_opts
}
fyayorphan() {
	# find all orphans packages and list the selected (for now)
	#
	#
	yay -Qdt | \
		fzf --multi --preview 'yay -Qi {1}' --accept-nth='{1}'	--border-label='orphanes packages'
}

# files search
#
fsuid() {
	# find all files with suid set (not in root)
	#
	#
	__check_cmd
	find / -type f -perm /u=s 2>/dev/null | xargs $__cmd_ls $__cmd_ls_opts -G|fzf --ansi --preview="man -f $(basename {$__cmd_ls_nth}) 2>/dev/null"
}
fguid() {
	# find all files with guid set (not in root)
	#
	#
	__check_cmd
	find / -type f -perm /g=s 2>/dev/null | xargs $__cmd_ls $__cmd_ls_opts -U|fzf --ansi --preview="man -f $(basename {$__cmd_ls_nth}) 2>/dev/null"
}
fsticky() {
	# find all directory with stickybit set (not in root)
	#
	#
	__check_cmd
	find / -perm -perm /1000 2>/dev/null|xargs $__cmd_ls $__cmd_ls_opts -d
}








